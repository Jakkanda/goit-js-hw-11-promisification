{"version":3,"sources":["js/task1.js","js/task2.js","js/task3.js","index.js"],"names":["delay","ms","Promise","resolve","setTimeout","logger","time","console","log","users","name","active","toggleUserState","allUsers","userName","map","user","logger1","updatedUsers","table","then","randomIntegerFromInterval","min","max","Math","floor","random","logSuccess","transaction","id","logError","warn","makeTransaction","reject","amount","catch"],"mappings":"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","file":"src.7b9de813.js","sourceRoot":"../src","sourcesContent":["export const delay = ms => {\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve(ms);\n    }, ms);\n  });\n};\n\nexport const logger = time => console.log(`Resolved after ${time} ms`);\n","export const users = [\n  { name: 'Mango', active: true },\n  { name: 'Poly', active: false },\n  { name: 'Ajax', active: true },\n  { name: 'Lux', active: false },\n];\n\nexport const toggleUserState = (allUsers, userName) => {\n  return new Promise(resolve => {\n    const updatedUsers = allUsers.map(user =>\n      user.name === userName ? { ...user, active: !user.active } : user,\n    );\n    resolve(updatedUsers);\n  });\n};\n\nexport const logger1 = updatedUsers => console.table(updatedUsers);\n\n\ntoggleUserState(users, 'Mango').then(logger1);\ntoggleUserState(users, 'Lux').then(logger1);\n","const randomIntegerFromInterval = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst logSuccess = ({ transaction, time }) => {\n  console.log(`Transaction ${transaction.id} processed in ${time} ms`);\n};\n\nconst logError = ({ id }) => {\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\n};\n\nconst makeTransaction = transaction => {\n  const delay = randomIntegerFromInterval(200, 500);\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const canProcess = Math.random() > 0.3;\n\n      if (canProcess) {\n        resolve({ transaction, time: delay });\n      }\n      reject(transaction);\n    }, delay);\n  });\n};\n\nexport { randomIntegerFromInterval, makeTransaction, logSuccess, logError };\n","import { delay, logger } from './js/task1';\nimport { users, toggleUserState, logger1 } from './js/task2';\nimport { randomIntegerFromInterval, makeTransaction, logSuccess, logError } from './js/task3';\n// Вызовы функции для проверки\n//Task1\ndelay(2000).then(logger); // Resolved after 2000ms\ndelay(1000).then(logger); // Resolved after 1000ms\ndelay(1500).then(logger); // Resolved after 1500ms\n//Task2\ntoggleUserState(users, 'Mango').then(logger1);\ntoggleUserState(users, 'Lux').then(logger1);\nmakeTransaction({ id: 70, amount: 150 }).then(logSuccess).catch(logError);\n//Task3\nmakeTransaction({ id: 71, amount: 230 }).then(logSuccess).catch(logError);\nmakeTransaction({ id: 72, amount: 75 }).then(logSuccess).catch(logError);\nmakeTransaction({ id: 73, amount: 100 }).then(logSuccess).catch(logError);\n\n"]}