{"version":3,"sources":["js/task1.js","js/task3.js","index.js"],"names":["delay","ms","Promise","resolve","setTimeout","logger","time","console","log","randomIntegerFromInterval","min","max","Math","floor","random","logSuccess","transaction","id","logError","warn","makeTransaction","reject","then","amount","catch"],"mappings":";AAQO,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,OAAA,QAAA,WAAA,EARA,IAAMA,EAAQ,SAAAC,GACZ,OAAA,IAAIC,QAAQ,SAAAC,GACjBC,WAAW,WACTD,EAAQF,IACPA,MAIA,QAAA,MAAA,EAAA,IAAMI,EAAS,SAAAC,GAAQC,OAAAA,QAAQC,IAAsBF,kBAAAA,OAAAA,EAAlC,SAAnB,QAAA,OAAA;;ACIP,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,SAAA,QAAA,WAAA,QAAA,gBAAA,QAAA,+BAAA,EAZA,IAAMG,EAA4B,SAACC,EAAKC,GAC/BC,OAAAA,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IAWtD,QAAA,0BAAA,EARA,IAAMK,EAAa,SAA2B,GAAxBC,IAAAA,EAAAA,EAAAA,YAAaV,EAAAA,EAAAA,KACjCC,QAAQC,IAAmBQ,eAAAA,OAAAA,EAAYC,GAAmBX,kBAAAA,OAAAA,EAA1D,SAOF,QAAA,WAAA,EAJA,IAAMY,EAAW,SAAY,GAATD,IAAAA,EAAAA,EAAAA,GAClBV,QAAQY,KAAqCF,gCAAAA,OAAAA,EAA7C,+BAGF,QAAA,SAAA,EAAA,IAAMG,EAAkB,SAAAJ,GAChBhB,IAAAA,EAAQS,EAA0B,IAAK,KACtC,OAAA,IAAIP,QAAQ,SAACC,EAASkB,GAC3BjB,WAAW,WACUQ,KAAKE,SAAW,IAGjCX,EAAQ,CAAEa,YAAAA,EAAaV,KAAMN,IAE/BqB,EAAOL,IACNhB,MAVP,QAAA,gBAAA;;ACCA,aAbA,IAAA,EAAA,QAAA,cACA,EAAA,QAAA,eAEA,EAAM,EAAA,OAAA,KAAMsB,KAAKjB,EAAjB,SACA,EAAM,EAAA,OAAA,KAAMiB,KAAKjB,EAAjB,SACA,EAAM,EAAA,OAAA,MAAMiB,KAAKjB,EAAjB,SAEA,EAAgB,EAAA,iBAAA,CAAEY,GAAI,GAAIM,OAAQ,MAAOD,KAAKP,EAA9C,YAA0DS,MAAMN,EAAhE,WAEA,EAAgB,EAAA,iBAAA,CAAED,GAAI,GAAIM,OAAQ,MAAOD,KAAKP,EAA9C,YAA0DS,MAAMN,EAAhE,WAEA,EAAgB,EAAA,iBAAA,CAAED,GAAI,GAAIM,OAAQ,KAAMD,KAAKP,EAA7C,YAAyDS,MAAMN,EAA/D,WAEA,EAAgB,EAAA,iBAAA,CAAED,GAAI,GAAIM,OAAQ,MAAOD,KAAKP,EAA9C,YAA0DS,MAAMN,EAAhE","file":"src.bcadc0fa.js","sourceRoot":"../src","sourcesContent":["export const delay = ms => {\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve(ms);\n    }, ms);\n  });\n};\n\nexport const logger = time => console.log(`Resolved after ${time} ms`);\n","const randomIntegerFromInterval = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst logSuccess = ({ transaction, time }) => {\n  console.log(`Transaction ${transaction.id} processed in ${time} ms`);\n};\n\nconst logError = ({ id }) => {\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\n};\n\nconst makeTransaction = transaction => {\n  const delay = randomIntegerFromInterval(200, 500);\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const canProcess = Math.random() > 0.3;\n\n      if (canProcess) {\n        resolve({ transaction, time: delay });\n      }\n      reject(transaction);\n    }, delay);\n  });\n};\n\nexport { randomIntegerFromInterval, makeTransaction, logSuccess, logError };\n","import { delay, logger } from './js/task1';\nimport { randomIntegerFromInterval, makeTransaction, logSuccess, logError } from './js/task3';\n// Вызовы функции для проверки\ndelay(2000).then(logger); // Resolved after 2000ms\ndelay(1000).then(logger); // Resolved after 1000ms\ndelay(1500).then(logger); // Resolved after 1500ms\n\nmakeTransaction({ id: 70, amount: 150 }).then(logSuccess).catch(logError);\n\nmakeTransaction({ id: 71, amount: 230 }).then(logSuccess).catch(logError);\n\nmakeTransaction({ id: 72, amount: 75 }).then(logSuccess).catch(logError);\n\nmakeTransaction({ id: 73, amount: 100 }).then(logSuccess).catch(logError);\n"]}